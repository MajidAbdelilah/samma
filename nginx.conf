events {
    worker_connections 1024;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    client_max_body_size 1G;  # Increase max upload size to 1GB
    proxy_read_timeout 300;
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging Settings
    access_log /var/log/nginx/access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/error.log warn;  # Changed to warn level for production

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Map variables for CORS
    map $http_origin $cors_origin {
        default "";
        "~^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$" $http_origin;
    }

    map $request_method $cors_method {
        OPTIONS 204;
        default $request_method;
    }

    # Map to determine if HTTPS is being used
    map $scheme $is_https {
        default 0;
        https 1;
    }

    # Error page directory and configuration
    root /usr/share/nginx/html;
    error_page 404 /error.html;
    error_page 500 502 503 504 /error.html;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name localhost 127.0.0.1;

        # Redirect all HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        # Updated HTTP/2 configuration
        http2 on;
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost 127.0.0.1;

        # SSL Configuration
        ssl_certificate /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_buffer_size 8k;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;

        # Global CORS settings
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-CSRFToken' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,X-CSRFToken' always;
        add_header 'Access-Control-Max-Age' 1728000 always;

        # Frontend
        location / {
            # Check if HTTPS is being used
            if ($is_https = 0) {
                return 301 https://$host$request_uri;
            }

            proxy_pass http://frontend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;
            proxy_buffering off;
            proxy_redirect off;

            # Error handling
            proxy_intercept_errors on;
            error_page 404 = /error.html;
            error_page 500 502 503 504 = /error.html;
        }

        # WebSocket endpoint with improved error handling
        location /_next/webpack-hmr {
            proxy_pass http://frontend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 404 = /error.html;
            error_page 500 502 503 504 = /error.html;
        }

        # Backend API
        location /api/v1/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-CSRFToken' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_pass http://backend:8000/api/v1/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header Origin $http_origin;
            proxy_cache_bypass $http_upgrade;
            proxy_buffering off;
            proxy_redirect off;
            
            # File upload settings
            client_max_body_size 1G;
            client_body_buffer_size 128k;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            # Error handling
            proxy_intercept_errors on;
            error_page 404 = /error.html;
            error_page 500 502 503 504 = /error.html;
        }

        # Backend Admin
        location /admin/ {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;

            # Error handling
            proxy_intercept_errors on;
            error_page 404 = /error.html;
            error_page 500 502 503 504 = /error.html;
        }

        # Backend Static
        location /static/ {
            alias /app/static/;
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }

        # Backend Media
        location /media/ {
            alias /app/media/;
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }

        # Favicon handling
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            alias /app/static/favicon.ico;
        }

        # Error page with proper MIME type
        location = /error.html {
            root /usr/share/nginx/html;
            internal;
            add_header Content-Type text/html;
        }
    }
} 